{"version":3,"sources":["DuelCanvas.js","ControlPanel.js","index.js"],"names":["CIRCLE","Math","PI","drawCircle","ctx","x","y","radius","color","beginPath","arc","fillStyle","fill","closePath","DuelCanvas","_ref","canvasWidth","canvasHeight","hero1Color","hero2Color","hero1Speed","hero2Speed","hero1ShootFreq","hero2ShootFreq","CANVAS_X_CENTER","CANVAS_Y_CENTER","Hero","constructor","dy","this","move","speed","bounce","draw","shoot","spellRadius","spellColor","spellX","spellY","Spell","dx","canvasRef","useRef","game","useState","hero1","hero2","spells","score1","score2","spellColors","updateHero","hero","mousePositionX","mousePositionY","updateSpells","updatedSpells","spell","isColliding","push","abs","shootSpell","setHeroSpellColor","menuPositionX","setMenuPositionX","menuPositionY","setMenuPositionY","selectedHero","setSelectedHero","menuVisible","setMenuVisible","setMousePositionX","setMousePositionY","lastMouseMoveTime","setLastMouseMoveTime","updateGame","useCallback","canvas","current","getContext","clearRect","width","height","font","fillText","useEffect","hero1ShootInterval","setInterval","console","log","hero2ShootInterval","clearInterval","gameLoopInterval","showMenu","menuStyle","position","left","top","backgroundColor","padding","border","borderRadius","menuItemStyle","textAlign","menuItems","React","createElement","style","margin","listStyleType","map","key","onClick","handleColorChange","ref","e","positionY","onMouseMove","currentTime","Date","now","rect","target","getBoundingClientRect","clientX","clientY","ControlPanel","setSpeed","frequency","setFrequency","type","min","max","value","onChange","parseInt","App","setHero1Speed","setHero2Speed","hero1Frequency","setHero1Frequency","hero2Frequency","setHero2Frequency","StrictMode","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.e28ecd7b.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from \"react\";\r\n\r\nconst SPELL_RADIUS = 5;\r\nconst HERO_RADIUS = 20;\r\nconst HERO_1=0;\r\nconst HERO_2=1;\r\nconst START_X_1=50;\r\nconst START_X_2=750;\r\nconst START_Y = 100;\r\nconst SPELL_COLOR_1=\"orange\";\r\nconst SPELL_COLOR_2=\"yellow\";\r\nconst LEFT=-1;\r\nconst RIGHT=1;\r\nconst CIRCLE=Math.PI*2;\r\nconst SCORE_X_1=50;\r\nconst SCORE_X_2=650;\r\nconst SCORE_Y=50;\r\nconst SCORE_FONT=\"20px Arial\";\r\nconst SCORE_COLOR=\"black\";\r\nconst UPDATE_INTERVAL=1000 / 60;\r\n\r\nconst drawCircle=(ctx,x,y,radius,color)=>{\r\n    ctx.beginPath();\r\n    // draw circle with centre at (x,y)\r\n    ctx.arc(x, y,radius, 0, CIRCLE);\r\n    ctx.fillStyle =color;\r\n    ctx.fill();\r\n    ctx.closePath();\r\n}\r\n\r\n\r\nconst DuelCanvas = ({ canvasWidth,canvasHeight,hero1Color,hero2Color,hero1Speed, hero2Speed, hero1ShootFreq, hero2ShootFreq }) => {\r\n  const CANVAS_X_CENTER = canvasWidth / 2;\r\n  const CANVAS_Y_CENTER=canvasHeight /2;\r\n  class Hero {\r\n    constructor(x, y, dy, radius, color) {\r\n      this.x = x;\r\n      this.y = y;\r\n      this.dy = dy;\r\n      this.radius = radius;\r\n      this.color = color;\r\n    }\r\n  \r\n    move(speed, canvasHeight) {\r\n      this.y += this.dy * speed;\r\n      if (this.y < this.radius) { // bouncing from top\r\n        this.bounce();\r\n        this.y = this.radius; // set position to top\r\n      } else if (this.y > canvasHeight - this.radius) { // bouncing from bottom\r\n        this.bounce();\r\n        this.y = canvasHeight - this.radius; // set position to bottom\r\n      }\r\n    }\r\n  \r\n    draw(ctx) {\r\n      drawCircle(ctx,this.x, this.y, this.radius, this.color);\r\n    }\r\n  \r\n    shoot(spellRadius, spellColor) {\r\n      let spellX = this.x;\r\n      if (spellX < CANVAS_X_CENTER) { // left hero shooting\r\n        spellX += this.radius; // shoot from right side\r\n      } else { // right hero shooting\r\n        spellX -= this.radius; // shoot from left side\r\n      }\r\n      let spellY = this.y + this.dy * 3; // so it looks like hero is shooting from correct place\r\n      return new Spell(spellX, spellY, spellColor, spellRadius);\r\n    }\r\n  \r\n    bounce() {\r\n      this.dy = -this.dy;\r\n    }\r\n  }\r\n  class Spell {\r\n    constructor(x, y, color, radius) {\r\n      this.x = x;\r\n      this.y = y;\r\n      this.color = color;\r\n      this.radius = radius;\r\n      this.dx = this.x < CANVAS_X_CENTER ? RIGHT: LEFT; // if left hero, spell moves right, if right hero, spell moves left\r\n    }\r\n  \r\n    move() {\r\n      this.x += this.dx;\r\n    }\r\n  \r\n    draw(ctx) {\r\n      drawCircle(ctx,this.x, this.y, this.radius, this.color);\r\n    }\r\n  }\r\n  \r\n  \r\n  class Game {\r\n    constructor() {\r\n      this.hero1 = new Hero(START_X_1, START_Y, 1, HERO_RADIUS, hero1Color);\r\n      this.hero2 = new Hero(START_X_2, START_Y, 1, HERO_RADIUS, hero2Color);\r\n      this.spells = [];\r\n      this.score1 = 0;\r\n      this.score2 = 0;\r\n      this.spellColors = [ SPELL_COLOR_1,SPELL_COLOR_2 ];\r\n    }\r\n  \r\n    updateHero(hero, speed, mousePositionX, mousePositionY) {\r\n      hero.move(speed, canvasHeight);\r\n       \r\n      const dx = mousePositionX - hero.x;\r\n      const dy = mousePositionY - hero.y;\r\n      const distanceSq = dx * dx + dy * dy; \r\n      if (distanceSq < hero.radius * hero.radius) {\r\n          if ((hero.dy > 0 && mousePositionY > hero.y) || (hero.dy < 0 && mousePositionY < hero.y) ) {\r\n              hero.bounce();\r\n          } \r\n      }\r\n    }\r\n  \r\n    updateSpells(ctx) {\r\n      const updatedSpells = [];\r\n      for (const spell of this.spells) {\r\n        spell.move();\r\n        if (spell.x < 0 || spell.x > canvasWidth) {\r\n          continue;\r\n        }\r\n        spell.draw(ctx);\r\n        if (this.isColliding(spell.x,spell.y, this.hero1)) {\r\n          this.score2++;\r\n        } else if (this.isColliding(spell.x, spell.y, this.hero2)) {\r\n          this.score1++;\r\n        } else {\r\n          updatedSpells.push(spell);\r\n        }\r\n      }\r\n      this.spells = updatedSpells;\r\n    }\r\n  \r\n    isColliding(x,y, hero) {\r\n      return Math.abs(x - hero.x) < hero.radius && Math.abs(y - hero.y) < hero.radius;\r\n    }\r\n  \r\n    shootSpell(hero) {\r\n      const color = this.spellColors[hero === this.hero1 ? HERO_1: HERO_2];\r\n      this.spells.push(hero.shoot(SPELL_RADIUS, color));\r\n    }\r\n  \r\n    setHeroSpellColor(hero, color) {\r\n      this.spellColors[hero === this.hero1 ? HERO_1 : HERO_2] = color;\r\n    }\r\n  }\r\n  \r\n  const canvasRef = useRef(null);\r\n  const [game] = useState(new Game());\r\n  const [menuPositionX, setMenuPositionX] = useState(0);\r\n  const [menuPositionY, setMenuPositionY] = useState(0);\r\n  const [selectedHero, setSelectedHero] = useState(null);\r\n  const [menuVisible, setMenuVisible] = useState(false);\r\n  const [mousePositionX, setMousePositionX] = useState(0);\r\n  const [mousePositionY, setMousePositionY] = useState(0);\r\n  const [lastMouseMoveTime, setLastMouseMoveTime] = useState(0);\r\n  const colors =[\"blue\", \"red\", \"green\", \"purple\", \"orange\"];\r\n\r\n  const updateGame = useCallback(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Update and draw heroes\r\n    game.updateHero(game.hero1, hero1Speed, mousePositionX, mousePositionY);\r\n    game.updateHero(game.hero2, hero2Speed, mousePositionX, mousePositionY);\r\n    game.hero1.draw(ctx);\r\n    game.hero2.draw(ctx);\r\n\r\n    // Update and draw spells\r\n    game.updateSpells(ctx);\r\n\r\n    // Draw score\r\n    ctx.font = SCORE_FONT;\r\n    ctx.fillStyle = SCORE_COLOR;\r\n    ctx.fillText(\"Hero 1: \"+ game.score1, SCORE_X_1, SCORE_Y);\r\n    ctx.fillText(\"Hero 2: \" + game.score2, SCORE_X_2, SCORE_Y);\r\n  }, [game, hero1Speed, hero2Speed, mousePositionX, mousePositionY]);\r\n\r\n  useEffect(() => {\r\n    const hero1ShootInterval = setInterval(() => {\r\n      game.shootSpell(game.hero1);\r\n      console.log(\"spell\");\r\n    }, 2000 / hero1ShootFreq);\r\n    const hero2ShootInterval = setInterval(() => {\r\n      game.shootSpell(game.hero2);\r\n    }, 2000 / hero2ShootFreq);\r\n    return () => {\r\n      clearInterval(hero1ShootInterval);\r\n      clearInterval(hero2ShootInterval);\r\n    };\r\n  }, [hero1ShootFreq, hero2ShootFreq, game]);\r\n\r\n  useEffect(() => {\r\n    const gameLoopInterval = setInterval(updateGame, UPDATE_INTERVAL);\r\n    return () => {\r\n      clearInterval(gameLoopInterval);\r\n    };\r\n  }, [updateGame, game]);\r\nconst showMenu=(x,y)=>{\r\n  setMenuPositionX( x );\r\n  setMenuPositionY( y );\r\n  setMenuVisible(true);\r\n}\r\n  const handleCanvasClick = (e) => {\r\n    const x = mousePositionX;\r\n    const y = mousePositionY;\r\n    let positionY=y;\r\n    if (y<CANVAS_Y_CENTER){\r\n      positionY+=100;\r\n    }\r\n    else{\r\n      positionY-=100;\r\n    }\r\n    if (game.isColliding(x, y, game.hero1)) {\r\n      setSelectedHero(HERO_1);\r\n      showMenu(x + 50,positionY)\r\n    } else if (game.isColliding( x, y, game.hero2)) {\r\n      setSelectedHero(HERO_2);\r\n      showMenu( x - 180,positionY );\r\n    } else if(menuVisible) {\r\n      setMenuVisible(false);\r\n    }\r\n  };\r\n\r\n  const handleMouseMove = (e) => {\r\n    const currentTime = Date.now();\r\n    if (currentTime - lastMouseMoveTime >= 50) { \r\n      const rect = e.target.getBoundingClientRect();\r\n      const x = e.clientX - rect.left;\r\n      const y = e.clientY - rect.top;\r\n      setMousePositionX(x);\r\n      setMousePositionY(y);\r\n      setLastMouseMoveTime(currentTime);\r\n    }\r\n  };\r\n\r\n  const handleColorChange = (color) => {\r\n    if (selectedHero === HERO_1) {\r\n      game.setHeroSpellColor(game.hero1, color);\r\n    } else {\r\n      game.setHeroSpellColor(game.hero2, color);\r\n    }\r\n    setMenuVisible(false); // Close the menu after changing color\r\n  };\r\n  const menuStyle={\r\n    position: \"absolute\",\r\n    left: menuPositionX+\"px\",\r\n    top: menuPositionY+\"px\",\r\n    backgroundColor: \"white\",\r\n    padding: \"2px 5px\",\r\n    border: \"1px solid #ddd\",\r\n    borderRadius: \"8px\",\r\n  };\r\n  const menuItemStyle={\r\n      padding: \"8px 10px\",\r\n      borderRadius: \"4px\",\r\n      textAlign: \"center\",\r\n      color: \"#333\",  \r\n  }\r\n  const menuItems=\r\n    <ol style={{ margin: 0, padding: 0, listStyleType: \"none\" }}>\r\n    {colors.map(color => (\r\n      <li\r\n        key={color}\r\n        onClick={() => handleColorChange(color)}\r\n        style={menuItemStyle}\r\n        \r\n      >\r\n        {color}\r\n      </li>\r\n    ))}\r\n  </ol>\r\n  \r\n  return (\r\n    <div>\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={canvasWidth}\r\n        height={canvasHeight}\r\n        style={{ border: \"2px solid black\" }}\r\n        onClick={handleCanvasClick}\r\n        onMouseMove={handleMouseMove}\r\n      />\r\n      {menuVisible && (\r\n  <div\r\n    style={menuStyle}\r\n  >\r\n    {menuItems}\r\n   \r\n  </div>\r\n)}\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DuelCanvas;\r\n","import React from \"react\";\r\nconst MIN_SPEED=1;\r\nconst MAX_SPEED=5;\r\nconst MIN_FREQUENCY=1;\r\nconst MAX_FREQUENCY=10;\r\n\r\nconst ControlPanel = ({ speed,setSpeed,frequency,setFrequency }) => {\r\n  return (\r\n    <div style={{ margin: \"10px\" }}>\r\n      <label>Movement Speed:</label>\r\n      <input\r\n        type=\"range\"\r\n        min={MIN_SPEED}\r\n        max={MAX_SPEED}\r\n        value={speed}\r\n        onChange={(e) => setSpeed(parseInt(e.target.value))}\r\n      />\r\n      <label>Shooting Frequency:</label>\r\n      <input\r\n        type=\"range\"\r\n        min={MIN_FREQUENCY}\r\n        max={MAX_FREQUENCY}\r\n        value={frequency}\r\n        onChange={(e) => setFrequency(parseInt(e.target.value))}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ControlPanel;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport DuelCanvas from \"./DuelCanvas\";\nimport ControlPanel from \"./ControlPanel\";\nconst CANVAS_WIDTH = 800;\nconst CANVAS_HEIGHT = 600;\nconst HERO_1_COLOR=\"blue\";\nconst HERO_2_COLOR=\"green\";\nconst App = () => {\n  const [hero1Speed, setHero1Speed] = React.useState(2);\n  const [hero2Speed, setHero2Speed] = React.useState(2);\n  const [hero1Frequency, setHero1Frequency] = React.useState(2);\n  const [hero2Frequency, setHero2Frequency] = React.useState(2);\n\n  return (\n    <React.StrictMode>\n      <ControlPanel\n        speed={ hero1Speed} \n        setSpeed={setHero1Speed}\n        frequency={hero1Frequency}\n        setFrequency={setHero1Frequency}\n      />\n      <ControlPanel\n        speed={hero2Speed}\n        setSpeed={setHero2Speed}\n        frequency={hero2Frequency}\n        setFrequency={setHero2Frequency}\n      />\n      <DuelCanvas\n      canvasWidth={CANVAS_WIDTH}\n      canvasHeight={CANVAS_HEIGHT}\n      hero1Color={HERO_1_COLOR}\n      hero2Color={HERO_2_COLOR}\n\n        hero1Speed={hero1Speed}\n        hero2Speed={hero2Speed}\n        hero1ShootFreq={hero1Frequency}\n        hero2ShootFreq={hero2Frequency}\n      />      \n    </React.StrictMode>\n  );\n};\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<App />);\n"],"sourceRoot":""}